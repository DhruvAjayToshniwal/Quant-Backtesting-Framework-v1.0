# -*- coding: utf-8 -*-
"""Back-Testing Framework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IiWG2K81Rcgx7UVROOUIyDRdj-AfE-sa
"""

!pip install backtrader
!pip install yfinance
!pip install pandas_ta

import backtrader as bt
import yfinance as yf
import pandas_ta as ta
from datetime import datetime
import matplotlib.pyplot as plt

class MyStrategy(bt.Strategy):
    def __init__(self):
        self.dataclose = self.datas[0].close
        self.order = None
        self.buyprice = None
        self.buycomm = None

        # Calculate technical indicators
        self.sma = bt.indicators.SimpleMovingAverage(self.datas[0], period=10)
        self.rsi = bt.indicators.RSI(self.datas[0], period=14)
        self.bbands = bt.indicators.BollingerBands(self.datas[0])

    def log(self, txt, dt=None):
        dt = dt or self.datas[0].datetime.datetime(0)
        print(f"{dt.isoformat()}, {txt}")

    def notify_order(self, order):
        if order.status in [order.Submitted, order.Accepted]:
            return

        if order.status in [order.Completed]:
            if order.isbuy():
                self.log(f"BUY EXECUTED, Price: {order.executed.price:.2f}, Cost: {order.executed.value:.2f}, Comm: {order.executed.comm:.2f}")
                self.buyprice = order.executed.price
                self.buycomm = order.executed.comm
            elif order.issell():
                self.log(f"SELL EXECUTED, Price: {order.executed.price:.2f}, Cost: {order.executed.value:.2f}, Comm: {order.executed.comm:.2f}")

        elif order.status in [order.Canceled, order.Margin, order.Rejected]:
            self.log("Order Canceled/Margin/Rejected")

        self.order = None

    def notify_trade(self, trade):
        if not trade.isclosed:
            return
        self.log(f"OPERATION RESULT, Gross: {trade.pnl:.2f}, Net: {trade.pnlcomm:.2f}")

    def next(self):
            self.log(f"Close: {self.dataclose[0]:.2f}, Position: {self.position.size}")

            if self.order:
                return

            if not self.position:
                if self.dataclose[0] > self.sma[0] and self.dataclose[-1] <= self.sma[-1] and self.rsi[0] < 30:
                    self.log(f"BUY CREATE, Price: {self.dataclose[0]:.2f}")
                    self.order = self.buy()

            else:
                if self.dataclose[0] < self.sma[0] and self.dataclose[-1] >= self.sma[-1] and self.rsi[0] > 70:
                    self.log(f"SELL CREATE, Price: {self.dataclose[0]:.2f}")
                    self.order = self.sell()
# Define the stock symbol and date range
symbol = 'AAPL'  # Replace with the desired stock symbol
start_date = datetime(2010, 1, 1)
end_date = datetime(2020, 12, 31)

# Fetch data from Yahoo Finance using yfinance
data = yf.download(symbol, start=start_date, end=end_date)

# Convert the pandas DataFrame to a backtrader feed
data_feed = bt.feeds.PandasData(dataname=data)

# Create a Cerebro instance
cerebro = bt.Cerebro()

# Add the data feed to Cerebro
cerebro.adddata(data_feed)

# Add your strategy to Cerebro
cerebro.addstrategy(MyStrategy)

# Set initial capital
cerebro.broker.setcash(100000)

# Set commission (if applicable)
cerebro.broker.setcommission(commission=0.001)

# Set position size (if applicable)
cerebro.addsizer(bt.sizers.SizerFix, stake=100)

# Run the backtest
cerebro.run()

# Get final portfolio value
final_portfolio_value = cerebro.broker.getvalue()
print(f"Final Portfolio Value: {final_portfolio_value:.2f}")

# Plot the strategy's equity curve
fig = cerebro.plot(style='candlestick', iplot=False)[0][0]

# Save the figure as an image
fig.savefig('equity_curve.png')

# Show the image file path
print("Equity curve plot saved as equity_curve.png")

# Plot the strategy's equity curve
plt.figure(figsize=(10, 6))
cerebro.plot(style='candlestick')

# Show the plot
plt.show()